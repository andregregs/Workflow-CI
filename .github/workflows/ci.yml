name: Heart Disease ML CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'MLProject/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      experiment_name:
        description: 'MLflow Experiment Name'
        required: false
        default: 'Heart_Disease_CI'
      test_size:
        description: 'Test set size (0.1-0.5)'
        required: false
        default: '0.2'

env:
  MLFLOW_TRACKING_URI: file:./mlruns
  DOCKER_IMAGE_NAME: heart-disease-ml
  DOCKER_REGISTRY: docker.io

jobs:
  mlflow-training:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: 3.9
        
    - name: Install MLflow
      run: |
        pip install mlflow>=2.8.0
        pip install click>=8.0.0
        mlflow --version
        
    - name: Validate MLProject Structure
      run: |
        echo "=== Checking MLProject Structure ==="
        ls -la MLProject/
        echo "=== MLProject File Content ==="
        cat MLProject/MLProject
        echo "=== Conda Environment ==="
        cat MLProject/conda.yaml
        
    - name: Run MLflow Project Training
      run: |
        cd MLProject
        echo "🚀 Running MLflow Project..."
        
        TEST_SIZE="${{ github.event.inputs.test_size || '0.2' }}"
        EXPERIMENT_NAME="${{ github.event.inputs.experiment_name || 'Heart_Disease_CI' }}"
        
        mlflow run . \
          --env-manager=conda \
          --experiment-name="$EXPERIMENT_NAME" \
          -P test_size=$TEST_SIZE \
          -P random_state=42 \
          -P max_iter=1000 \
          -P n_estimators=100 \
          -P run_id="${{ github.run_id }}" \
          -P commit_sha="${{ github.sha }}"
          
        echo "✅ MLflow Project completed"
        
    - name: List MLflow Artifacts
      run: |
        echo "=== MLflow Runs Directory ==="
        find MLProject/mlruns -type f -name "*.png" -o -name "*.pkl" -o -name "*.json" | head -20
        
        echo "=== Training Summary ==="
        if [ -f "MLProject/training_summary.json" ]; then
          cat MLProject/training_summary.json
        fi
        
    - name: Upload MLflow Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mlflow-artifacts-${{ github.run_id }}
        path: |
          MLProject/mlruns/
          MLProject/*.png
          MLProject/*.pkl
          MLProject/*.json
          MLProject/training_summary.json
        retention-days: 30
        
    - name: Create Deployment Package
      run: |
        cd MLProject
        echo "📦 Creating deployment package..."
        
        mkdir -p deployment
        
        cp modelling.py deployment/
        cp MLProject deployment/
        cp conda.yaml deployment/
        cp training_summary.json deployment/ 2>/dev/null || echo "No summary file"
        
        find mlruns -name "*.pkl" -type f | head -1 | xargs -I {} cp {} deployment/best_model.pkl 2>/dev/null || echo "No pickle model found"
        
        echo "# Heart Disease ML Deployment Package" > deployment/README.md
        echo "Generated: $(date)" >> deployment/README.md
        echo "Commit: ${{ github.sha }}" >> deployment/README.md
        echo "Run ID: ${{ github.run_id }}" >> deployment/README.md
        
        tar -czf heart-disease-ml-deployment.tar.gz deployment/
        
        echo "✅ Deployment package created"
        
    - name: Upload Deployment Package
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package-${{ github.run_id }}
        path: MLProject/heart-disease-ml-deployment.tar.gz
        retention-days: 90

  docker-build:
    runs-on: ubuntu-latest
    needs: mlflow-training
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download MLflow Artifacts
      uses: actions/download-artifact@v3
      with:
        name: mlflow-artifacts-${{ github.run_id }}
        path: MLProject/
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Install MLflow
      run: |
        pip install mlflow>=2.8.0
        pip install docker>=6.0.0
        
    - name: Build Docker Image with MLflow
      run: |
        cd MLProject
        
        echo "🐳 Building Docker image with MLflow..."
        
        BEST_RUN_ID=$(find mlruns -name "*.pkl" -type f | head -1 | cut -d'/' -f3)
        
        if [ -z "$BEST_RUN_ID" ]; then
          echo "⚠️  No model run found, creating standalone Docker image"
          
          cat > Dockerfile << 'EOF'
        FROM python:3.9-slim

        WORKDIR /app

        COPY conda.yaml requirements.txt* ./

        RUN pip install mlflow pandas numpy scikit-learn matplotlib seaborn joblib

        COPY modelling.py MLProject ./
        COPY *.png *.pkl *.json ./

        EXPOSE 5000

        CMD ["mlflow", "models", "serve", "--no-conda", "--host", "0.0.0.0", "--port", "5000"]
        EOF
          
          docker build -t ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:latest .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }} .
          
        else
          echo "🎯 Found model run: $BEST_RUN_ID"
          
          mlflow models build-docker \
            --model-uri "runs:/$BEST_RUN_ID/model_random_forest" \
            --name "${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:latest" \
            --install-mlflow || {
            
            echo "⚠️  MLflow build-docker failed, using fallback method"
            
            cat > Dockerfile << 'EOF'
        FROM python:3.9-slim

        WORKDIR /app

        RUN pip install mlflow pandas numpy scikit-learn matplotlib seaborn joblib

        COPY mlruns ./mlruns

        COPY modelling.py MLProject conda.yaml ./

        EXPOSE 5000

        CMD ["mlflow", "models", "serve", "--model-uri", "runs:/$BEST_RUN_ID/model_random_forest", "--host", "0.0.0.0", "--port", "5000"]
        EOF
            
            docker build -t ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:latest .
            docker build -t ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }} .
          }
        fi
        
        echo "✅ Docker image built successfully"
        
    - name: Push Docker Image to Docker Hub
      run: |
        echo "🚀 Pushing Docker image to Docker Hub..."
        
        docker push ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }}
        
        echo "✅ Docker image pushed successfully"
        
        echo "https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/heart-disease-ml" > docker-hub-link.txt
        
    - name: Upload Docker Hub Link
      uses: actions/upload-artifact@v3
      with:
        name: docker-hub-link
        path: MLProject/docker-hub-link.txt

  create-release:
    runs-on: ubuntu-latest
    needs: [mlflow-training, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Heart Disease ML v${{ github.run_number }}
        body: |
          ## Heart Disease ML Model Release
          
          **Run ID:** ${{ github.run_id }}
          **Commit:** ${{ github.sha }}
          **Date:** ${{ github.event.head_commit.timestamp }}
          
          ### What's Included:
          - ✅ MLflow Project with 4 trained models
          - ✅ Model artifacts and visualizations
          - ✅ Docker image: `${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }}`
          - ✅ Deployment package
          
          ### Models Trained:
          - Logistic Regression
          - Random Forest
          - Gradient Boosting
          - SVM
          
          ### Metrics Tracked:
          - Standard: accuracy, precision, recall, f1, roc_auc
          - Additional: matthews_corrcoef, balanced_accuracy, log_loss, pr_auc, specificity, npv, fpr, fdr
          
          ### Usage:
          ```bash
          # Run with MLflow
          mlflow run https://github.com/${{ github.repository }}.git
          
          # Run with Docker
          docker run -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }}
          ```
        draft: false
        prerelease: false