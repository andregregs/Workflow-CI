name: Heart Disease ML CI/CD Pipeline

# Trigger workflow
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'MLProject/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger
    inputs:
      experiment_name:
        description: 'MLflow Experiment Name'
        required: false
        default: 'Heart_Disease_CI'
      test_size:
        description: 'Test set size (0.1-0.5)'
        required: false
        default: '0.2'

env:
  MLFLOW_TRACKING_URI: file:./mlruns
  DOCKER_IMAGE_NAME: heart-disease-ml
  DOCKER_REGISTRY: docker.io

jobs:
  # Job 1: MLflow Project Training
  mlflow-training:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    # Step 2: Set up Python
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    # Step 3: Set up Conda
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: 3.9
        
    # Step 4: Install MLflow
    - name: Install MLflow
      run: |
        pip install mlflow>=2.8.0
        pip install click>=8.0.0
        mlflow --version
        
    # Step 5: Validate MLProject
    - name: Validate MLProject Structure
      run: |
        echo "=== Checking MLProject Structure ==="
        ls -la MLProject/
        echo "=== MLProject File Content ==="
        cat MLProject/MLProject
        echo "=== Conda Environment ==="
        cat MLProject/conda.yaml
        
    # Step 6: Run MLflow Project
    - name: Run MLflow Project Training
      run: |
        cd MLProject
        echo "üöÄ Running MLflow Project..."
        
        # Set parameters
        TEST_SIZE="${{ github.event.inputs.test_size || '0.2' }}"
        EXPERIMENT_NAME="${{ github.event.inputs.experiment_name || 'Heart_Disease_CI' }}"
        
        # Run MLflow project
        mlflow run . \
          --env-manager=conda \
          --experiment-name="$EXPERIMENT_NAME" \
          -P test_size=$TEST_SIZE \
          -P random_state=42 \
          -P max_iter=1000 \
          -P n_estimators=100 \
          -P run_id="${{ github.run_id }}" \
          -P commit_sha="${{ github.sha }}"
          
        echo "‚úÖ MLflow Project completed"
        
    # Step 7: List Generated Artifacts
    - name: List MLflow Artifacts
      run: |
        echo "=== MLflow Runs Directory ==="
        find MLProject/mlruns -type f -name "*.png" -o -name "*.pkl" -o -name "*.json" | head -20
        
        echo "=== Training Summary ==="
        if [ -f "MLProject/training_summary.json" ]; then
          cat MLProject/training_summary.json
        fi
        
    # Step 8: Upload Artifacts to GitHub
    - name: Upload MLflow Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mlflow-artifacts-${{ github.run_id }}
        path: |
          MLProject/mlruns/
          MLProject/*.png
          MLProject/*.pkl
          MLProject/*.json
          MLProject/training_summary.json
        retention-days: 30
        
    # Step 9: Create Deployment Package
    - name: Create Deployment Package
      run: |
        cd MLProject
        echo "üì¶ Creating deployment package..."
        
        # Create deployment directory
        mkdir -p deployment
        
        # Copy essential files
        cp modelling.py deployment/
        cp MLProject deployment/
        cp conda.yaml deployment/
        cp training_summary.json deployment/ 2>/dev/null || echo "No summary file"
        
        # Copy best model (if exists)
        find mlruns -name "*.pkl" -type f | head -1 | xargs -I {} cp {} deployment/best_model.pkl 2>/dev/null || echo "No pickle model found"
        
        # Create deployment info
        echo "# Heart Disease ML Deployment Package" > deployment/README.md
        echo "Generated: $(date)" >> deployment/README.md
        echo "Commit: ${{ github.sha }}" >> deployment/README.md
        echo "Run ID: ${{ github.run_id }}" >> deployment/README.md
        
        # Archive deployment package
        tar -czf heart-disease-ml-deployment.tar.gz deployment/
        
        echo "‚úÖ Deployment package created"
        
    # Step 10: Upload Deployment Package
    - name: Upload Deployment Package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-${{ github.run_id }}
        path: MLProject/heart-disease-ml-deployment.tar.gz
        retention-days: 90

  # Job 2: Docker Build and Push (Advance requirement)
  docker-build:
    runs-on: ubuntu-latest
    needs: mlflow-training
    if: github.ref == 'refs/heads/main'
    
    steps:
    # Step 1: Checkout code
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    # Step 2: Download artifacts from training job
    - name: Download MLflow Artifacts
      uses: actions/download-artifact@v4
      with:
        name: mlflow-artifacts-${{ github.run_id }}
        path: MLProject/
        
    # Step 3: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    # Step 4: Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    # Step 5: Prepare Build Context
    - name: Prepare Docker Build Context
      run: |
        cd MLProject
        echo "üì¶ Preparing Docker build context..."
        
        # Ensure all required files exist
        touch training_summary.json
        
        # Create minimal mlruns if missing
        mkdir -p mlruns
        
        # Copy any generated artifacts to avoid COPY issues
        find . -name "*.png" -exec echo "Found artifact: {}" \;
        find . -name "*.pkl" -exec echo "Found model: {}" \;
        
        # List all files for build context
        echo "üìÅ Files in build context:"
        ls -la
        
        echo "‚úÖ Build context prepared"
        
    # Step 6: Install MLflow for Docker operations
    - name: Install MLflow
      run: |
        pip install mlflow>=2.8.0
        pip install docker>=6.0.0
        
    # Step 7: Build Docker Image with MLflow
    - name: Build Docker Image with MLflow
      run: |
        cd MLProject
        
        echo "üê≥ Building Docker image with MLflow..."
        
        # Create robust Dockerfile
        cat > Dockerfile << 'EOF'
        FROM python:3.9-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y gcc && rm -rf /var/lib/apt/lists/*

        # Install Python dependencies
        RUN pip install mlflow pandas numpy scikit-learn matplotlib seaborn joblib click

        # Copy application files
        COPY modelling.py ./
        COPY MLProject ./
        COPY conda.yaml ./
        COPY heart.csv ./

        # Copy artifacts if they exist
        COPY training_summary.json ./ 2>/dev/null || echo "No summary file"

        # Create MLflow directory structure
        RUN mkdir -p mlruns

        # Copy MLflow runs if they exist (with proper handling)
        RUN if [ -d "mlruns" ]; then cp -r mlruns/* ./mlruns/ 2>/dev/null || echo "No MLflow runs to copy"; fi

        # Expose MLflow port
        EXPOSE 5000

        # Create entrypoint script
        RUN echo '#!/bin/bash\n\
        if [ "$1" = "serve" ]; then\n\
          echo "üöÄ Starting MLflow model server..."\n\
          # Find any available model\n\
          MODEL_PATH=$(find mlruns -name "model" -type d | head -1)\n\
          if [ -n "$MODEL_PATH" ]; then\n\
            mlflow models serve --model-uri "file://$PWD/$MODEL_PATH" --host 0.0.0.0 --port 5000 --no-conda\n\
          else\n\
            echo "No trained model found, running training first..."\n\
            python modelling.py\n\
            MODEL_PATH=$(find mlruns -name "model" -type d | head -1)\n\
            if [ -n "$MODEL_PATH" ]; then\n\
              mlflow models serve --model-uri "file://$PWD/$MODEL_PATH" --host 0.0.0.0 --port 5000 --no-conda\n\
            else\n\
              echo "Training failed, starting MLflow UI instead"\n\
              mlflow ui --host 0.0.0.0 --port 5000\n\
            fi\n\
          fi\n\
        elif [ "$1" = "train" ]; then\n\
          echo "ü§ñ Running model training..."\n\
          python modelling.py\n\
        elif [ "$1" = "ui" ]; then\n\
          echo "üñ•Ô∏è  Starting MLflow UI..."\n\
          mlflow ui --host 0.0.0.0 --port 5000\n\
        else\n\
          echo "üöÄ Heart Disease ML Container"\n\
          echo "Available commands:"\n\
          echo "  serve - Start model server"\n\
          echo "  train - Run model training"\n\
          echo "  ui    - Start MLflow UI"\n\
          echo ""\n\
          echo "Usage: docker run -p 5000:5000 <image> <command>"\n\
          exec "$@"\n\
        fi' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

        # Default command
        ENTRYPOINT ["/app/entrypoint.sh"]
        CMD ["serve"]
        EOF
        
        echo "‚úÖ Dockerfile created successfully"
        cat Dockerfile
        
        # Prepare build context
        echo "üì¶ Preparing build context..."
        
        # Ensure required files exist
        touch training_summary.json
        
        # Create minimal mlruns structure if it doesn't exist
        if [ ! -d "mlruns" ]; then
          mkdir -p mlruns
          echo "Created empty mlruns directory"
        fi
        
        # List build context
        echo "üìÅ Build context files:"
        ls -la
        
        # Build Docker image
        echo "üî® Building Docker image..."
        docker build \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --tag ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:latest \
          --tag ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }} \
          .
        
        echo "‚úÖ Docker image built successfully"
        
    # Step 7: Push Docker Image
    - name: Push Docker Image to Docker Hub
      run: |
        echo "üöÄ Pushing Docker image to Docker Hub..."
        
        docker push ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }}
        
        echo "‚úÖ Docker image pushed successfully"
        
        # Create Docker Hub link file
        echo "https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/heart-disease-ml" > docker-hub-link.txt
        
    # Step 9: Upload Docker Hub Link
    - name: Upload Docker Hub Link
      uses: actions/upload-artifact@v4
      with:
        name: docker-hub-link
        path: MLProject/docker-hub-link.txt

  # Job 3: Create Release (if on main branch)
  create-release:
    runs-on: ubuntu-latest
    needs: [mlflow-training, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    # Step 1: Checkout code
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    # Step 2: Download all artifacts
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      
    # Step 3: Create Release
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Heart Disease ML v${{ github.run_number }}
        body: |
          ## Heart Disease ML Model Release
          
          **Run ID:** ${{ github.run_id }}
          **Commit:** ${{ github.sha }}
          **Date:** $(date)
          
          ### What's Included:
          - ‚úÖ MLflow Project with 4 trained models
          - ‚úÖ Model artifacts and visualizations
          - ‚úÖ Docker image: `${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }}`
          - ‚úÖ Deployment package
          
          ### Models Trained:
          - Logistic Regression
          - Random Forest
          - Gradient Boosting
          - SVM
          
          ### Metrics Tracked:
          - Standard: accuracy, precision, recall, f1, roc_auc
          - Additional: matthews_corrcoef, balanced_accuracy, log_loss, pr_auc, specificity, npv, fpr, fdr
          
          ### Usage:
          ```bash
          # Run with MLflow
          mlflow run https://github.com/${{ github.repository }}.git
          
          # Run with Docker
          docker run -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/heart-disease-ml:${{ github.run_id }}
          ```
        draft: false
        prerelease: false